library(methrix)
tools::file_ext("~/temp/random_bed.gz")
dir.exists("../R/")
dir.exists("../Rt/")
bg = "~/wgbs/blueprint/test.bg"
bg
output_directory = "dummy_coverage_bedgraphs")
output_directory = "dummy_coverage_bedgraphs"
if(!dir.exists(output_directory)){dir.create(output_directory)}
if(tools::file_ext(bedgraphs) == "gz"){
compress_command = "gzip -c"
} else {compress_command = "cat"}
if(tools::file_ext(bg) == "gz"){
compress_command = "gzip -c"
} else {compress_command = "cat"}
compress_command
sprintf("zcat -f %s | awk -v OFS='\t' {print $0, 0} |  %s > %s/%s", bg, compress_command, output_directory, bg)
basename(bg)
sprintf("zcat -f %s | awk -v OFS='\t' {print $0, 0} |  %s > %s/%s", bg, compress_command, output_directory, basename(bg))
system.time({system(sprintf("zcat -f %s | awk -v OFS='\t' '{print $0, 0}' |  %s > %s/%s", bg, compress_command, output_directory, basename(bg)))})
bg = "~/wgbs/blueprint/test.bg.gz"
if(!dir.exists(output_directory)){dir.create(output_directory)}
for(bg in bedgraphs){
if(tools::file_ext(bg) == "gz"){
compress_command = "gzip -c"
} else {compress_command = "cat"}
system.time({system(sprintf("zcat -f %s | awk -v OFS='\t' '{print $0, 0}' |  %s > %s/%s", bg, compress_command, output_directory, basename(bg)))})
}
if(tools::file_ext(bg) == "gz"){
compress_command = "gzip -c"
} else {compress_command = "cat"}
compress_command
system.time({system(sprintf("zcat -f %s | awk -v OFS='\t' '{print $0, 0}' |  %s > %s/%s", bg, compress_command, output_directory, basename(bg)))})
dim(methrix_data)
library(methrix)
dim(methrix_data)
load(methrix_data)
data(methrix_data)
dim(methrix_data)
head(methrix_data)
methrix_data
names(methrix)
names(methrix_data)
methrix_data$Condition
methrix_data$Pair
library(methrix2)
bg_urls = sapply(c("N1", "N6", "N10", "N12", "N16", "N17", "N18", "N19", "N22", "N26", "T1", "T6", "T10", "T12", "T16", "T17", "T18", "T19", "T22", "T26"),
gsub("XX", x, "https://wangftp.wustl.edu/~hlee/SMMU/PC/WGBS_bedGraph/XX_WGBS.CG.bg.gz"))
bg_urls = sapply(c("N1", "N6", "N10", "N12", "N16", "N17", "N18", "N19", "N22", "N26", "T1", "T6", "T10", "T12", "T16", "T17", "T18", "T19", "T22", "T26"), function(x)
gsub("XX", x, "https://wangftp.wustl.edu/~hlee/SMMU/PC/WGBS_bedGraph/XX_WGBS.CG.bg.gz"))
bg_urls
gencode_tss = readRDS("~/genomes/gencode/gencode_granges/gencode_v38_transcript_tss_ranges.rds")
head(gencode_tss )
head(gencode_tss[gencode_tss$gene_name == "GSTP1"])
gencode_tss[gencode_tss$gene_name == "GSTP1"]
getwd()
list.files()
download.file("https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/gencode.v38.annotation.gff3.gz")
download.file("https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/gencode.v38.annotation.gtf3.gz", destfile = "gencode_annoation.gtf3.gz")
download.file("https://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_38/gencode.v38.annotation.gtf.gz", destfile = "gencode_annoation.gtf.gz")
system("zcat -c gencode.v38.annotation.gtf3.gz | head")
system("zcat gencode.v38.annotation.gtf3.gz | head")
system("zcat gencode.v38.annotation.gtf.gz | head")
list.files()
system("zcat gencode_annotation.gtf.gz | head")
system("zcat gencode_annoation.gtf.gz | head")
unlink("gencode_annoation.gtf.gz")
head(gencode_tss)
gencode_tss[gencode_tss$transcript_id == "ENST00000398606.10"]
library(biomaRt)
mart = useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
searchAttributes(mart = mart, pattern = "transcript")
searchAttributes(mart = mart, pattern = "ensembl_transcript")
library(methrix2)
getBM(mart = mart, attributes = "ensembl_transcript_id", filters = "ENST00000398606.10")
getBM(mart = mart, attributes = "ensembl_transcript_id", filters = "ensembl_transcript_id", values = "ENST00000398606.10")
getBM(mart = mart, attributes = "ensembl_transcript_id", filters = "ensembl_transcript_id", values = list("ENST00000398606.10"))
getBM(mart = mart, attributes = "ensembl_transcript_id", filters = "ensembl_transcript_id", values = list("ENST00000398606"))
searchAttributes(mart = mart, pattern = "start")
getBM(mart = mart, attributes = c("ensembl_transcript_id", "transcription_start_site"), filters = "ensembl_transcript_id", values = list("ENST00000398606"))
searchAttributes(mart = mart, pattern = "chrom")
head(searchAttributes(mart = mart, pattern = "chrom"))
getBM(mart = mart, attributes = c("chromosome_name", "transcription_start_site"), filters = "ensembl_transcript_id", values = list("ENST00000398606"))
gstp1_tss = getBM(mart = mart, attributes = c("chromosome_name", "transcription_start_site"), filters = "ensembl_transcript_id", values = list("ENST00000398606"))
gstp1_tss_gr = GenomicRanges::GRanges(seqnames = gstp1_tss$chromosome_name, ranges = IRanges(gstp1_tss$transcription_start_site))
gstp1_tss_gr
gstp1_methylation = extract_cpg_values_from_methrix(methrix = prostate_methrix, regions = gstp1_tss_gr)
#' Get methylation values of CpG sites overlapping a GRanges object from a methrix object
#'
#' @param methrix A methrix object
#' @param regions Genomic regions to subset by. Could be a data.table with 3 columns (chr, start, end) or a GenomicRanges object
#' @param samples Sample names to subset by. Default is to get values for all samples.
#' @return A data.frame with the methylation values of overlapping CpG sites with CpG names as first column
#' @export
extract_cpg_values_from_methrix = function(methrix, regions, samples = NULL){
# Create a tbl_SQLiteConnection to the table in the database
cpg_values = methrix::get_matrix(methrix::subset_methrix(methrix, regions, samples), type = "M", add_loci = T)
cpg_values = tibble::column_to_rownames(dplyr::select(dplyr::mutate(cpg_values, cpg_name = paste(chr, start, sep = ":")), -chr, -start, -strand), "cpg_name")
names(cpg_values) = gsub("_WGBS", "", names(cpg_values))
return(cpg_values)
}
gstp1_methylation = extract_cpg_values_from_methrix(methrix = prostate_methrix, regions = gstp1_tss_gr)
prostate_methrix=load_HDF5_methrix("../vignettes/prostate_methrix_h5/")
gstp1_methylation = extract_cpg_values_from_methrix(methrix = prostate_methrix, regions = gstp1_tss_gr)
#' Expand GRanges
#'
#' Expand ranges in a GRanges object upstream and downstream by specified numbers of bases, taking strand into account.
#' If GRanges do not have a strand, they are treated like they are on the "+" strand.
#'
#' @param genomic_regions A GRanges object
#' @param upstream An integer specifying the the number of bases to adjust each region upstream of its start. Default is 0 bases.
#' @param downstream An An integer specifying the number of bases to adjust each region downstream of its end. Default is 0 bases.
#' @return None
#' @export
expand_granges = function(genomic_regions, upstream = 0, downstream = 0) {
# Check for each range if it's on the negative or positive strand
strand_is_minus = as.character(GenomicRanges::strand(genomic_regions)) == "-"
on_plus = which(!strand_is_minus)
on_minus = which(strand_is_minus)
# Adjust ranges based on wether they are on the positive or negative strand
GenomicRanges::start(genomic_regions)[on_plus] = GenomicRanges::start(genomic_regions)[on_plus] - upstream
GenomicRanges::start(genomic_regions)[on_minus] = GenomicRanges::start(genomic_regions)[on_minus] - downstream
GenomicRanges::end(genomic_regions)[on_plus] = GenomicRanges::end(genomic_regions)[on_plus] + downstream
GenomicRanges::end(genomic_regions)[on_minus] = GenomicRanges::end(genomic_regions)[on_minus] + upstream
return(genomic_regions)
}
gstp1_methylation = extract_cpg_values_from_methrix(methrix = prostate_methrix, regions = expand_granges(gstp1_tss_gr, 2000, 2000))
expand_granges(gstp1_tss_gr, 2000, 2000)
head(searchAttributes(mart = mart, pattern = "ucsc"))
seqlevelsStyle(gstp1_tss_gr)
seqlevelsStyle(gstp1_tss_gr) = "UCSC"
gstp1_tss_gr
gstp1_methylation = extract_cpg_values_from_methrix(methrix = prostate_methrix, regions = expand_granges(gstp1_tss_gr, 2000, 2000))
dim(gstp1_methylation)
head(gstp1_methylation)
bg_urls = sapply(c("N1", "N6", "N10", "N12", "N16", "N17", "N18", "N19", "N22", "N26", "T1", "T6", "T10", "T12", "T16", "T17", "T18", "T19", "T22", "T26"), function(x)
gsub("XX", x, "https://wangftp.wustl.edu/~hlee/SMMU/PC/WGBS_bedGraph/XX_WGBS.CG.bg.gz"))
bg_urls
basename(bg_urls)
paste0("~/mounts/hpcnfs_mount/scratch/MS/cpgea/wgbs/all_bedgraphs_hg38/", basename(bg_urls))
system.time(system2("cp" c(paste0("~/mounts/hpcnfs_mount/scratch/MS/cpgea/wgbs/all_bedgraphs_hg38/", basename(bg_urls), "../data/")))
system.time(system2("cp", c(paste0("~/mounts/hpcnfs_mount/scratch/MS/cpgea/wgbs/all_bedgraphs_hg38/", basename(bg_urls), "../data/")))
system.time(system2("cp", c(paste0("~/mounts/hpcnfs_mount/scratch/MS/cpgea/wgbs/all_bedgraphs_hg38/", basename(bg_urls)), "../data/"))))
system.time(system2("cp", c(paste0("~/mounts/hpcnfs_mount/scratch/MS/cpgea/wgbs/all_bedgraphs_hg38/", basename(bg_urls)), "../data/")))
library(devtools)
use_package("tools")
use_package("")
use_package("GenomicRanges")
use_package("methrix")
use_package("tibble")
use_package("dplyr")
use_package("rtracklayer")
use_package("ggplot2", type = "Depends")
use_package("reshape2")
use_package("scales")
use_package("methrix", type = "Depends")
library(devtools)
document()
use_package("biomaRt", "suggests")
use_package("biomaRt", "suggests")
use_package("biomaRt", "suggests")
use_package("ggpubr", "suggests")
document()
document()
document()
build(vignettes = F)
use_mit_license()
build(vignettes = F)
build(vignettes = F)
build(vignettes = F)
build(vignettes = F)
tempfile(tmpdir = "_dummy_coverage_bedgraphs_temp")
207.540*37
207.540*37/3600
library(profvis)
library(methrix)
library(methodical)
library(methodical)
getwd()
?file.copy
getwd()
file.copy("rest.R", "test.R")
file.copy("rest.R", "test.R", overwrite = T)
file.copy("rest.R", "testdir")
file.copy("rest.R", "testdir")
file.copy("rest.R", "testdir", overwrite = T)
# Load required packages
library(methodical)
?add_dummy_coverage_to_bedgraphs
