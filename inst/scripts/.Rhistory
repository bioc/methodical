scale_fill_discrete(breaks = c("TMRs", "Background"))
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
pdf_save(plotlist = test_plots, filename = "test_plots2.pdf")
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance)) + coord_flip() +
scale_fill_discrete(breaks = c("Background", "TMRs"))
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
pdf_save(plotlist = test_plots, filename = "test_plots2.pdf")
test_plots[1]
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance)) + coord_flip() +
scale_fill_discrete(breaks = c("TMRs", "Background"))
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
test_plots[1]
head(df2)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 1)) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature", scale)
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 1)) + coord_flip()
plot
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0)) + coord_flip()
plot
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature", scale)
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F)) + coord_flip()
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
pdf_save(plotlist = test_plots, filename = "test_plots2.pdf")
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") + scale_fill_discrete(limits = c("TMRs", "Background"))
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
pdf_save(plotlist = test_plots, filename = "test_plots2.pdf")
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")# + scale_fill_discrete(limits = c("TMRs", "Background"))
}
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
pdf_save(plotlist = test_plots, filename = "test_plots2.pdf")
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") + scale_fill_discrete(limits = c("TMRs", "Background"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature")# + scale_fill_discrete(limits = c("TMRs", "Background"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_discrete(limits = c("TMRs", "Background"), values = c("blue", "red"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background"), values = c("blue", "red"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background")) +
scale_color_manual(limits = c("TMRs", "Background"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background")) +
scale_color_manual(values = c("#F8766D", "#00BFC4"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background")) +
scale_color_discrete(values = c("#F8766D", "#00BFC4"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background")) +
scale_color_manual(values = c("#F8766D", "#00BFC4"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background"), values = c("#F8766D", "#00BFC4")) +
scale_color_manual(values = c("#F8766D", "#00BFC4"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test2 = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background"), values = c("#F8766D", "#00BFC4")) +
scale_color_manual(values = c("#00BFC4", "#F8766D"))
}
test2(genomic_feature_ovelap_results_list$cpgea_normal_negative)
test_plots = lapply(genomic_feature_ovelap_results_list, function(x) test2(x))
pdf_save(plotlist = test_plots, filename = "test_plots2.pdf")
# Create a function which creates a plot contrasting the proportion of CpGs overlapping genomic features in TMRs and control regions
plot_tmr_cpg_proportions = function(df){
df$significance = sig_sym(df$q_value)
df$significance_height = pmax(df$estimate1, df$estimate2)
df$difference = df$estimate1 - df$estimate2
df2 = select(df, tf_name, estimate1, estimate2, significance, significance_height, difference)
df2 = tidyr::pivot_longer(df2, cols = c("estimate1", "estimate2"))
df2$name = ifelse(df2$name == "estimate1", "TMRs", "Background")
df2$tf_name = factor(df2$tf_name, levels = rev(names(genome_annotation)))
plot = ggplot(df2, aes(x = tf_name, y = value, fill = name)) +
geom_col(position = "dodge") +
geom_text(mapping = aes(y = significance_height + 0.02, label = significance, color = difference > 0), show.legend = F) + coord_flip()
plotR::customize_ggplot_theme(plot, ylab = "Proportion of CpGs", xlab = "Genomic Feature") +
scale_fill_manual(limits = c("TMRs", "Background"), values = c("#F8766D", "#00BFC4")) +
scale_color_manual(values = c("#00BFC4", "#F8766D"))
}
tmr_cpg_proportion_plots = lapply(genomic_feature_ovelap_results_list, plot_tmr_cpg_proportions)
pdf_save(plotlist = tmr_cpg_proportion_plots, filename = "tmr_cpg_proportion_plots.pdf")
unlink("test_plots2.pdf")
unlink("test_plots.pdf")
titles = c("CPGEA Normal Negative", "CPGEA Normal Positive", "CPGEA Tumour Negative", "CPGEA Tumour Positive", "MCRPC Negative", "MCRPC Positive")
tmr_cpg_proportion_plots = lapply(genomic_feature_ovelap_results_list, plot_tmr_cpg_proportions)
tmr_cpg_proportion_plots = plotR::title_ggplots(tmr_cpg_proportion_plots, titles)
pdf_save(plotlist = tmr_cpg_proportion_plots, filename = "tmr_cpg_proportion_plots.pdf")
library(methodical)
methodical::genome_annotation_hg38
q()
detach("package:methodical", unload = T)
library(methodical)
class(methodical::genome_annotation_hg38)
class(genome_annotation_hg38)
detach("package:methodical", unload = T)
library(methodical)
methodical:::calculate_regions_overlaps
getwd()
old=getwd()
setwd("~/my_packages/methodical/inst/scripts/")
# Load required packages
library(dplyr)
library(GenomicRanges)
library(biomaRt)
# Import Gencode annotation
system.time({gencode_annotation = rtracklayer::import.gff2("genome_annotation_files/gencode.v38.annotation.gtf.gz")})
# Add a column to gencode_annotation  classifying transcripts
gencode_annotation$region_type = gencode_annotation $gene_type
# rRNAs, rRNA pseudogenes and mitochondrial RNAs are all classed as rRNAs
gencode_annotation$region_type[grepl("rRNA", gencode_annotation$region_type, ignore.case = T)] = "rRNA"
# All remaining pseudogenes classed as pseudogenes
gencode_annotation$region_type[grepl("pseudogene", gencode_annotation$region_type, ignore.case = T)] = "Pseudogene"
# snoRNA, miRNAs, snRNA and misc_RNA are all classed small RNAs
gencode_annotation$region_type[grepl("snorna|mirna|snrna|misc_RNA", gencode_annotation$region_type, ignore.case = T)] = "Small RNA"
# protein_coding is changed to Protein-Coding
gencode_annotation$region_type[gencode_annotation$region_type == "protein_coding"] = "Protein-Coding"
# Filter for protein-coding genes, lncRNAs, pseudogenes, small RNAs and rRNAs
gencode_annotation  = gencode_annotation[gencode_annotation$region_type %in% c("Protein-Coding", "lncRNA", "Pseudogene", "Small RNA", "rRNA")]
# Create GRanges object for genes. There are 60,649 genes
gene_ranges_hg38 = gencode_annotation[gencode_annotation$type == "gene"]
# Get transcript annotation from Gencode and subset for transcripts of genes in gene_ranges_hg38
transcript_ranges_hg38 = gencode_annotation[gencode_annotation$type == "transcript"]
# Get transcription start sites for transcripts
tss_sites_hg38 = resize(transcript_ranges_hg38, fix = "start", width = 1, ignore.strand = F)
# Set region_type as TSS
tss_sites_hg38$region_type = paste("TSS", transcript_ranges_hg38$region_type)
# Get exon annotation from Gencode and subset for exons of genes in gene_ranges_hg38
exon_ranges_hg38 = gencode_annotation[gencode_annotation$type == "exon"]
# Set region_type as exon
exon_ranges_hg38$region_type = paste("Exon", exon_ranges_hg38$region_type)
intron_ranges_hg38 = readRDS("genome_annotation_files/intron_ranges_hg38.rds")
head(intron_ranges_hg38)
# Update region type to include intron
intron_ranges_hg38$region_type = paste("Intron", intron_ranges_hg38$region_type)
head(intron_ranges_hg38)
# Remove objects that are no longer needed
rm(gencode_annotation, transcript_ranges_hg38_list, exon_ranges_hg38_list, intron_ranges_hg38_list); gc()
# Read table of CpG islands. Note that name column is not actually the name, but instead the number of CpGs in the island.
cpg_islands_hg38 = read.table("genome_annotation_files/masked_cpg_islands_hg38_ucsc_hg38.txt.gz", sep = "\t", header = F)
# Set column names of cpg_islands_hg38 taken from URL:
# http://genome.ucsc.edu/cgi-bin/hgTables?db=hg38&hgta_group=regulation&hgta_track=cpgIslandExt&hgta_table=cpgIslandExt&hgta_doSchema=describe%20table%20schema
names(cpg_islands_hg38) = c("bin", "chrom", "chromStart", "chromEnd", "name", "length", "cpgNum", "gcNum", "perCpg", "perGc", "obsExp")
# Set row.names of CpG islands to the name of the chromosome and the start site of the island
row.names(cpg_islands_hg38) = paste(cpg_islands_hg38$chrom, cpg_islands_hg38$chromStart, sep = "_")
# Turn CpG islands into a GRanges and sort
cpg_islands_hg38 = sort(makeGRangesFromDataFrame(cpg_islands_hg38, keep.extra.columns = F, ignore.strand = T))
# Give cpg_islands_hg38 a metadata column called region_type with "CpG Island"
cpg_islands_hg38$region_type = "CpG Island"
# Get regulatory feature mart for hg38 for Ensembl version 109
regulatory_mart_hg38 = useEnsembl("ENSEMBL_MART_FUNCGEN", dataset = "hsapiens_regulatory_feature", version = 109)
# Get names of all regulatory features
regulatory_feature_names_hg38 = listFilterOptions(regulatory_mart_hg38, "regulatory_feature_type_name")
regulatory_feature_names_hg38 = setNames(regulatory_feature_names_hg38, regulatory_feature_names_hg38)
# Download GRanges for each type of regulatory feature
regulatory_features_hg38 = lapply(regulatory_feature_names_hg38, function(feature)
GRanges(
getBM(
mart = regulatory_mart_hg38,
filters = c("chromosome_name", "regulatory_feature_type_name"),
values = list(c(1:22, "X", "Y"),  feature),
attributes = c("chromosome_start", "chromosome_end", "chromosome_name", "feature_type_description")
)
)
)
# Combine regulatory_features_hg38 into a single GRanges
regulatory_features_hg38 = unlist(GRangesList(regulatory_features_hg38))
# Update seqlevels style to UCSC
seqlevelsStyle(regulatory_features_hg38) = "UCSC"
# Change feature_type_description to region_class
names(mcols(regulatory_features_hg38)) = "region_type"
# Convert remaining regulatory feature names to title case
regulatory_features_hg38$region_type = stringr::str_to_title(regulatory_features_hg38$region_type)
# Change "Ctcf Binding Site" to "CTCF BS" and "Transcription Factor Binding Site" to "TF BS"
regulatory_features_hg38$region_type[regulatory_features_hg38$region_type == "Ctcf Binding Site"] = "CTCF BS"
regulatory_features_hg38$region_type[regulatory_features_hg38$region_type == "Transcription Factor Binding Site"] = "TF BS"
e
# Read in table for repetitive element annotation
repetitive_element_table = data.table::fread("genome_annotation_files/ucsc_repetitive_sequence_annotation.tsv.gz",
header = F, fill = T, skip = 3)
# Add names to the relevant columns
names(repetitive_element_table) = c(rep(NA, 4), "chromosome", "start", "end", NA, NA, NA, "type", rep(NA, 4))
# Extract class and family from type
repetitive_element_table$class = gsub("/.*", "", repetitive_element_table$type)
repetitive_element_table$family = ifelse(grepl("/", repetitive_element_table$type), gsub(".*/", "", repetitive_element_table$type), NA)
# Discard unnecessary columns
repetitive_element_table = dplyr::select(repetitive_element_table, chromosome, start, end, class, family)
# Remove ranges where the class or family is uncertain, denoted by the presence of a ? in the class/family name.
repetitive_element_table = filter(repetitive_element_table, !grepl("\\?", repetitive_element_table$class) & !grepl("\\?", repetitive_element_table$family))
# Convert the table into a GRanges object
repeat_ranges_hg38 = GRanges(repetitive_element_table)
# Add a region_type metadata column, initialized to NA
repeat_ranges_hg38$region_type = NA
# Add the most abundant groups of repeat element to region_type
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$class == "DNA")] = "DNA Transposon"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$class == "LTR")] = "LTR"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$class == "Satellite")] = "Satellite"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$class == "Simple_repeat")] = "Simple Repeat"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$class == "Low_complexity")] = "Low Complexity"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$family == "Alu")] = "Alu"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$family == "MIR")] = "MIR"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$family == "SVA")] = "SVA"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$family == "L1")] = "L1"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$family == "L2")] = "L2"
repeat_ranges_hg38$region_type[which(repeat_ranges_hg38$family == "CR1")] = "CR1"
# Remove repeats which do not belong to the above classes
repeat_ranges_hg38 = repeat_ranges_hg38[!is.na(repeat_ranges_hg38$region_type)]
# Remove repetitive_element_table
rm(repetitive_element_table); gc()
head(genome_annotation_hg38)
# Create a GRanges combining all the other annotation GRanges.
# 82% of the genome is annotated by genome_annotation_hg38.
genome_annotation_hg38 = c(tss_sites_hg38, exon_ranges_hg38, intron_ranges_hg38,
cpg_islands_hg38, regulatory_features_hg38, repeat_ranges_hg38)
head(genome_annotation_hg38)
# Remove all ranges not on standard chromosomes and update seqlevels
seqlevels(genome_annotation_hg38, pruning.mode = "coarse") = standard_chroms
# Get the names of all standard chromosomes
standard_chroms = extractSeqlevels(species = "Homo_sapiens", style = "UCSC")
# Remove all ranges not on standard chromosomes and update seqlevels
seqlevels(genome_annotation_hg38, pruning.mode = "coarse") = standard_chroms
# Add seqinfo to genome_annotation_hg38 from BSgenome.Hsapiens.UCSC.hg38
seqinfo(genome_annotation_hg38) = seqinfo(BSgenome.Hsapiens.UCSC.hg38::BSgenome.Hsapiens.UCSC.hg38)[standard_chroms]
# Sort genome_annotation_hg38
genome_annotation_hg38 = sort(genome_annotation_hg38, ignore.strand = T)
# Remove ranges names and all metadata columns except region_type
mcols(genome_annotation_hg38) = mcols(genome_annotation_hg38)["region_type"]
names(genome_annotation_hg38) = NULL
table(genome_annotation_hg38$region_type)
srt(table(genome_annotation_hg38$region_type))
sort(table(genome_annotation_hg38$region_type))
genomeTools::count_covered_bases(genome_annotation_hg38)
hg38 = GRanges(seqinfo(BSgenome.Hsapiens.UCSC.hg38)[extractSeqlevelsByGroup(species="Homo_sapiens", style="UCSC", group="all")])
library(BSgenome.Hsapiens.UCSC.hg38)
hg38 = GRanges(seqinfo(BSgenome.Hsapiens.UCSC.hg38)[extractSeqlevelsByGroup(species="Homo_sapiens", style="UCSC", group="all")])
genomeTools::count_covered_bases(genome_annotation_hg38)/genomeTools::count_covered_bases(hg38)
table(genome_annotation_hg38$region_type)
# Save genome_annotation_hg38
saveRDS(genome_annotation_hg38, "genome_annotation_files/genome_annotation_hg38.rds")
detach("package:methodical", unload = T)
detach("package:methodical", unload = T)
library(methodical)
detach("package:methodical", unload = T)
library(methodical)
q()
# Load required packages
library(AnnotationHub)
# Create a connection to annotationhub()
ah = AnnotationHub()
names(mcols(ah ))
length(ah)
# Filter ah for human results for hg38
ah = subset(ah, species == "Homo sapiens", genome = "hg38")
# Filter ah for human results for hg38
ah = subset(ah, species == "Homo sapiens", genome == "hg38")
# Filter ah for human results for hg38
ah = subset(ah, species == "Homo sapiens" & genome == "hg38")
length(ah)
# Filter ah for human results for hg38 which are related to repeats
ah = query(subset(ah, species == "Homo sapiens" & genome == "hg38"), "repeat")
length(ah)
ah
mcols(ah["AH99003"])
recordStatus(ah, "AH99003")
mcols(ah["AH99003"])$sourceurl
BiocManager::install("UCSCRepeatMasker")
library(UCSCRepeatMasker)
class(UCSCRepeatMasker)
ls()
UCSCRepeatMasker:::
x =UCSCRepeatMasker
x = load(UCSCRepeatMasker)
x = library(UCSCRepeatMasker)
x
# Create a connection to AnnotationHub
ah = AnnotationHub()
d=head(mcols(ah))
d
# Filter ah for human results for hg38 which are related to repeats
ah2 = query(subset(ah, species == "Homo sapiens" & genome == "hg38"), "repeat")
mcols(ah2)
mcols(ah2)$description
repeats = ah[["AH99003"]])
repeats = ah[["AH99003"]]
class(repeats)
length(repeats)
head(repeats)
# Read in table for repetitive element annotation
repetitive_element_table = data.table::fread("genome_annotation_files/ucsc_repetitive_sequence_annotation.tsv.gz",
header = F, fill = T, skip = 3)
# Add names to the relevant columns
names(repetitive_element_table) = c(rep(NA, 4), "chromosome", "start", "end", NA, NA, NA, "type", rep(NA, 4))
# Extract class and family from type
repetitive_element_table$class = gsub("/.*", "", repetitive_element_table$type)
repetitive_element_table$family = ifelse(grepl("/", repetitive_element_table$type), gsub(".*/", "", repetitive_element_table$type), NA)
# Discard unnecessary columns
repetitive_element_table = dplyr::select(repetitive_element_table, chromosome, start, end, class, family)
# Convert the table into a GRanges object
repeat_ranges_hg38 = GRanges(repetitive_element_table)
length(repeat_ranges_hg38)
length(repeat_ranges_hg38)
length(repeats)
test = query(ah, pattern = "AnnotationData")
length(test)
